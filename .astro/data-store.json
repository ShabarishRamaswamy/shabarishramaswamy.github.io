[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.0.5","config-digest","f756207bb1b45114","posts",["Map",9,10,25,26,71,72],"hello-world",{"id":9,"data":11,"body":17,"filePath":18,"digest":19,"rendered":20},{"title":12,"slug":9,"description":13,"added":14,"tags":15},"Hello, world!","This is an example blog!",["Date","2024-12-27T18:30:00.000Z"],[16],"personal","Hi Guys, by the grace of Lord Ganesha, I'm starting a technical blog documenting my adventures. Hope y'all enjoy it!","posts/hello-world.md","e802cdbc55b7c175",{"html":21,"metadata":22},"\u003Cp>Hi Guys, by the grace of Lord Ganesha, I’m starting a technical blog documenting my adventures. Hope y’all enjoy it!\u003C/p>",{"headings":23,"imagePaths":24,"frontmatter":11},[],[],"video-streaming-intro",{"id":25,"data":27,"body":33,"filePath":34,"digest":35,"rendered":36},{"title":28,"slug":25,"description":29,"added":30,"tags":31},"Video Streaming in Go [Part 1]","This series goes through how a generic video streaming website functions.",["Date","2024-12-31T18:30:00.000Z"],[32],"technical","I have been messing around with video streaming tech over the past few months for [GoSeek](https://github.com/ShabarishRamaswamy/GoSeek), this series of blogs are an account of my personal journey into discovering how video streaming works!\n\nBefore diving deep into the topic, we should answer some of these basic questions:\n\n* How does the web handle data?\n* What even is streaming?\n* What is Video?\n* How can I stream video? (Lmao recursion)\n\n\u003Cbr>\nLet us start with the most basic question first:\n\n# How does web handle data?\n\nThere are a number of ways data is shared on the web, most popular of which is [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview). But HTTP works on \u003Cu>text\u003C/u>. And \u003Cu>video data is clearly not text\u003C/u>!\u003Cbr>\n\nThe answer to this lies in the spec itself. Although the request and response formats are text based, the payload data shared during the request or the response can be \u003Cu>anything\u003C/u>, refer [HTTP 1.0+ Content-Type](https://www.w3.org/Protocols/HTTP/1.0/spec.html#Content-Type). \u003Cbr>\u003Cbr>\n\n# Data can be anything, so what?\n\nOur primary intuition can be to transfer video as \u003Cu>binary\u003C/u> data which can be decoded and displayed. This is easier said than done. This was the way in which videos were served pre [HTML5 Video](https://en.wikipedia.org/wiki/HTML_video) era. Back then, you had to use Flash Player or roll your own video decoder on the client side to even display videos, \u003Cu>Crazy Times!\u003C/u>.\u003Cbr>\u003Cbr>\n\n# What even is Video?\n\n\u003Cu>It's just a bunch of images with an overlayed audio\u003C/u>. In reality, videos are much more complicated than that, having complex compression mechanisms, encoding and decoding steps, etc. We might or might not visit these steps in detail in this series. \u003Cbr> \u003Cbr>\n\n# HTML 5 Video\n\nThe HTML spec now natively supports [video](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video). In the frontend you can specify a source [URI](https://datatracker.ietf.org/doc/html/rfc3986#section-1.1) and a [codec/type](https://en.wikipedia.org/wiki/Video_codec). The browser fetches this video and starts playing. \u003Cbr>\u003Cbr>\n\n## This is where things get interesting.\n\nYou can now run a static content webserver eg. [Go's FileServer](https://pkg.go.dev/net/http#FileServer) and the video should work as expected.\n\n# Working Example\n\n#### Go FileServer\n\nThis hosts the static files.\n\n```go\nhttp.Handle(\"/Static-Content/\", http.StripPrefix(\"/Static-Content/\", http.FileServer(http.Dir(\"./Static-Content\"))))\n```\n\nAll this says is, whenever you get a request for /Static-Content/\\* just map it to the contents in the Static-Content folder.\n\nE.g. GET /Static-Content/index.html serves the index.html\n\n```\nStatic-Content\n  index.html\n  video.mp4\nmain.go\ngo.mod\n```\n\nFull Working Example:\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"text/template\"\n)\n\ntype VideoPath struct {\n\tVideoPath string\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/play-video\", defaultImplementation)\n\thttp.Handle(\"/Static-Content/\", http.StripPrefix(\"/Static-Content/\", http.FileServer(http.Dir(\"./Static-Content\"))))\n\tlog.Fatal(http.ListenAndServe(\":5005\", nil))\n}\n\nfunc defaultImplementation(w http.ResponseWriter, r *http.Request) {\n\tvp := VideoPath{VideoPath: \"/Static-Content/video.mp4\"}\n\tdefaultImplementationPath := filepath.Join(\"./\", \"Static-Content\", \"default.html\")\n\n\ttemplate.Must(template.ParseFiles(defaultImplementationPath)).Execute(w, vp)\n}\n```\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n\u003Chead>\n    \u003Cmeta charset=\"UTF-8\">\n    \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \u003Ctitle>HTML 5 Video\u003C/title>\n\u003C/head>\n\n\u003Cbody>\n    \u003Cdiv>\n        \u003Cp>Static Video\u003C/p>\n        \n        \u003Cvideo controls id=\"video\">\n            \u003Csource src=\"{{.VideoPath}}\" type=\"video/mp4\">\n            Your browser does not support the video tag.\n        \u003C/video>\n        \n    \u003C/div>\n\u003C/body>\n\u003C/html>\n```\n\nOutput:\n\n![](\u003C/assets/Screenshot 2024-12-29 at 2.33.35 AM.png>)\n\n# Is this it?\n\nNope!\nThis is just the beginning.\n\nFor the curious, you might be thinking, \"But we didn't touch the video at all\". And that's true. In this implementation we are not in control! The Static server does the work for us, but for a video streaming website, \u003Cu>WE NEED TO BE IN CONTROL!\u003C/u> \u003Cbr>\u003Cbr>\n\nIn the following blogs we will cover:\n\n1. How Static Sites actually send the video.\n2. HTTP Content Ranges.\n3. Video Encoder/Decoders (Codecs).\n4. Adaptive Bitrates.\n5. Streaming Standards like Apple HLS, Microsoft Smooth, MPEG-DASH. \u003Cbr>\n\n# and much more.\n\nSo stay tuned for the next week's blog!","posts/video-streaming-intro.md","a8849e8e3dd1d010",{"html":37,"metadata":38},"\u003Cp>I have been messing around with video streaming tech over the past few months for \u003Ca href=\"https://github.com/ShabarishRamaswamy/GoSeek\">GoSeek\u003C/a>, this series of blogs are an account of my personal journey into discovering how video streaming works!\u003C/p>\n\u003Cp>Before diving deep into the topic, we should answer some of these basic questions:\u003C/p>\n\u003Cul>\n\u003Cli>How does the web handle data?\u003C/li>\n\u003Cli>What even is streaming?\u003C/li>\n\u003Cli>What is Video?\u003C/li>\n\u003Cli>How can I stream video? (Lmao recursion)\u003C/li>\n\u003C/ul>\n\u003Cbr>\nLet us start with the most basic question first:\n\u003Ch1 id=\"how-does-web-handle-data\">How does web handle data?\u003C/h1>\n\u003Cp>There are a number of ways data is shared on the web, most popular of which is \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">HTTP\u003C/a>. But HTTP works on \u003Cu>text\u003C/u>. And \u003Cu>video data is clearly not text\u003C/u>!\u003Cbr>\u003C/p>\n\u003Cp>The answer to this lies in the spec itself. Although the request and response formats are text based, the payload data shared during the request or the response can be \u003Cu>anything\u003C/u>, refer \u003Ca href=\"https://www.w3.org/Protocols/HTTP/1.0/spec.html#Content-Type\">HTTP 1.0+ Content-Type\u003C/a>. \u003Cbr>\u003Cbr>\u003C/p>\n\u003Ch1 id=\"data-can-be-anything-so-what\">Data can be anything, so what?\u003C/h1>\n\u003Cp>Our primary intuition can be to transfer video as \u003Cu>binary\u003C/u> data which can be decoded and displayed. This is easier said than done. This was the way in which videos were served pre \u003Ca href=\"https://en.wikipedia.org/wiki/HTML_video\">HTML5 Video\u003C/a> era. Back then, you had to use Flash Player or roll your own video decoder on the client side to even display videos, \u003Cu>Crazy Times!\u003C/u>.\u003Cbr>\u003Cbr>\u003C/p>\n\u003Ch1 id=\"what-even-is-video\">What even is Video?\u003C/h1>\n\u003Cp>\u003Cu>It’s just a bunch of images with an overlayed audio\u003C/u>. In reality, videos are much more complicated than that, having complex compression mechanisms, encoding and decoding steps, etc. We might or might not visit these steps in detail in this series. \u003Cbr> \u003Cbr>\u003C/p>\n\u003Ch1 id=\"html-5-video\">HTML 5 Video\u003C/h1>\n\u003Cp>The HTML spec now natively supports \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">video\u003C/a>. In the frontend you can specify a source \u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc3986#section-1.1\">URI\u003C/a> and a \u003Ca href=\"https://en.wikipedia.org/wiki/Video_codec\">codec/type\u003C/a>. The browser fetches this video and starts playing. \u003Cbr>\u003Cbr>\u003C/p>\n\u003Ch2 id=\"this-is-where-things-get-interesting\">This is where things get interesting.\u003C/h2>\n\u003Cp>You can now run a static content webserver eg. \u003Ca href=\"https://pkg.go.dev/net/http#FileServer\">Go’s FileServer\u003C/a> and the video should work as expected.\u003C/p>\n\u003Ch1 id=\"working-example\">Working Example\u003C/h1>\n\u003Ch4 id=\"go-fileserver\">Go FileServer\u003C/h4>\n\u003Cp>This hosts the static files.\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Handle\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">StripPrefix\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">FileServer\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Dir\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">./Static-Content\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">))))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>All this says is, whenever you get a request for /Static-Content/* just map it to the contents in the Static-Content folder.\u003C/p>\n\u003Cp>E.g. GET /Static-Content/index.html serves the index.html\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Static-Content\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  index.html\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  video.mp4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>main.go\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>go.mod\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Full Working Example:\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">package\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF;font-style:italic\">import\u003C/span>\u003Cspan style=\"color:#89DDFF\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">log\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">net/http\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">path/filepath\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">text/template\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">type\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> VideoPath\u003C/span>\u003Cspan style=\"color:#89DDFF\"> struct\u003C/span>\u003Cspan style=\"color:#89DDFF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tVideoPath \u003C/span>\u003Cspan style=\"color:#C792EA\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">func\u003C/span>\u003Cspan style=\"color:#82AAFF\"> main\u003C/span>\u003Cspan style=\"color:#89DDFF\">()\u003C/span>\u003Cspan style=\"color:#89DDFF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\thttp\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">HandleFunc\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/play-video\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> defaultImplementation\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\thttp\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Handle\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">StripPrefix\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">FileServer\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Dir\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">./Static-Content\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">))))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tlog\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Fatal\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">ListenAndServe\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">:5005\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#89DDFF\"> nil))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">func\u003C/span>\u003Cspan style=\"color:#82AAFF\"> defaultImplementation\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF;font-style:italic\">w\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FFCB6B\">ResponseWriter\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF;font-style:italic\"> r\u003C/span>\u003Cspan style=\"color:#89DDFF\"> *\u003C/span>\u003Cspan style=\"color:#FFCB6B\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FFCB6B\">Request\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003Cspan style=\"color:#89DDFF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tvp \u003C/span>\u003Cspan style=\"color:#89DDFF\">:=\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> VideoPath\u003C/span>\u003Cspan style=\"color:#89DDFF\">{\u003C/span>\u003Cspan style=\"color:#EEFFFF\">VideoPath\u003C/span>\u003Cspan style=\"color:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/video.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tdefaultImplementationPath \u003C/span>\u003Cspan style=\"color:#89DDFF\">:=\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> filepath\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Join\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">./\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#C3E88D\">Static-Content\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#C3E88D\">default.html\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\ttemplate\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Must\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">template\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">ParseFiles\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">defaultImplementationPath\u003C/span>\u003Cspan style=\"color:#89DDFF\">)).\u003C/span>\u003Cspan style=\"color:#82AAFF\">Execute\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">w\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> vp\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#F07178\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#C792EA\"> html\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">html\u003C/span>\u003Cspan style=\"color:#C792EA\"> lang\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">en\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">head\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">meta\u003C/span>\u003Cspan style=\"color:#C792EA\"> charset\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">UTF-8\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">meta\u003C/span>\u003Cspan style=\"color:#C792EA\"> name\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">viewport\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> content\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">width=device-width, initial-scale=1.0\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">title\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">HTML 5 Video\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">title\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">head\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">body\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">div\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">p\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">Static Video\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">p\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#C792EA\"> controls\u003C/span>\u003Cspan style=\"color:#C792EA\"> id\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">{{.VideoPath}}\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">            Your browser does not support the video tag.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">div\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">body\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">html\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Output:\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/Screenshot 2024-12-29 at 2.33.35 AM.png\" alt=\"\">\u003C/p>\n\u003Ch1 id=\"is-this-it\">Is this it?\u003C/h1>\n\u003Cp>Nope!\nThis is just the beginning.\u003C/p>\n\u003Cp>For the curious, you might be thinking, “But we didn’t touch the video at all”. And that’s true. In this implementation we are not in control! The Static server does the work for us, but for a video streaming website, \u003Cu>WE NEED TO BE IN CONTROL!\u003C/u> \u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>In the following blogs we will cover:\u003C/p>\n\u003Col>\n\u003Cli>How Static Sites actually send the video.\u003C/li>\n\u003Cli>HTTP Content Ranges.\u003C/li>\n\u003Cli>Video Encoder/Decoders (Codecs).\u003C/li>\n\u003Cli>Adaptive Bitrates.\u003C/li>\n\u003Cli>Streaming Standards like Apple HLS, Microsoft Smooth, MPEG-DASH. \u003Cbr>\u003C/li>\n\u003C/ol>\n\u003Ch1 id=\"and-much-more\">and much more.\u003C/h1>\n\u003Cp>So stay tuned for the next week’s blog!\u003C/p>",{"headings":39,"imagePaths":70,"frontmatter":27},[40,44,47,50,53,57,60,64,67],{"depth":41,"slug":42,"text":43},1,"how-does-web-handle-data","How does web handle data?",{"depth":41,"slug":45,"text":46},"data-can-be-anything-so-what","Data can be anything, so what?",{"depth":41,"slug":48,"text":49},"what-even-is-video","What even is Video?",{"depth":41,"slug":51,"text":52},"html-5-video","HTML 5 Video",{"depth":54,"slug":55,"text":56},2,"this-is-where-things-get-interesting","This is where things get interesting.",{"depth":41,"slug":58,"text":59},"working-example","Working Example",{"depth":61,"slug":62,"text":63},4,"go-fileserver","Go FileServer",{"depth":41,"slug":65,"text":66},"is-this-it","Is this it?",{"depth":41,"slug":68,"text":69},"and-much-more","and much more.",[],"video-streaming-in-go-part-2",{"id":71,"data":73,"body":78,"filePath":79,"digest":80,"rendered":81},{"title":74,"slug":71,"description":75,"added":76,"tags":77},"Video Streaming in Go [Part 2] - Client Request, HTTP Ranges","Learn about the \u003CVideo> tag, HTTP Content Ranges and more.",["Date","2025-02-01T08:00:00.000Z"],[32],"This is the second part in a series of blogs on Video Streaming. Check out the first part: [Video Streaming in Go \\[Part 1\\]](/post/video-streaming-intro/)\n\n# What have we learned so far?\n\nWe can \"stream\" video using a static server. But we are not in control of anything!\n\n# Next Steps\n\n1. Somehow send data ourselves and not abstract it away.\n2. Account for Bandwidth and other video constraints.\n3. Maybe code custom input methods like Speed-Up, Slow-Down, change quality.\n   etc.\n\nBut all of these are high level objectives. We need a good base and build up to these. \u003Cbr> \u003Cbr>\n\n# The HTML Video Element\n\nThe first key to controlling everything is understanding the \u003Cb>\u003Cu>output field\u003C/u>\u003C/b>. Almost all web based video playback uses the [HTML5 Video](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) element.\n\nYou can technically make your own video player but it's more hassle than what it's worth. I plan to cover what used to be done pre-HTML 5 Video days in another blog.\n\nFor now, the only thing we care about is the fact that the Video Element takes in a [URL](https://webmasters.stackexchange.com/questions/19101/what-is-the-difference-between-a-uri-and-a-url) and a [MIME Type](https://developer.mozilla.org/en-US/docs/Web/Media/Formats).\u003Cbr> \u003Cbr>\n\n# Simple way to use the \\\u003Cvideo> element\n\n[From MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video):\n\n```html\n\u003Cvideo controls width=\"250\">\n  \u003Csource src=\"/media/cc0-videos/flower.mp4\" type=\"video/mp4\" />\n\u003C/video>\n```\n\nYou specify the \u003Cu>source\u003C/u> and the \u003Cu>MIME-Type\u003C/u> and the browser requests the said media.\u003Cbr>\u003Cbr>\n\nNow, we will see a more comprehensive example:\n\n```html\n\u003Cvideo controls width=\"250\">\n  \u003Csource src=\"/media/cc0-videos/flower.webm\" type=\"video/webm\" />\n\n  \u003Csource src=\"/media/cc0-videos/flower.mp4\" type=\"video/mp4\" />\n\n  Download the\n  \u003Ca href=\"/media/cc0-videos/flower.webm\">WEBM\u003C/a>\n  or\n  \u003Ca href=\"/media/cc0-videos/flower.mp4\">MP4\u003C/a>\n  video.\n\u003C/video>\n```\n\nHere, we list the MIME-Type in \u003Cu>descending order\u003C/u> of importance. I.e Given that a client has all the [codecs](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs) listed above, it will choose \u003Cu>\u003Cb>WebM first\u003C/b>\u003C/u>. \u003Cu>If\u003C/u> it does not have the WebM codec \u003Cu>then only\u003C/u> will it choose the MP4 format to stream.\n\n# HTTP Content Ranges\n\n* What [request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview) does the video element send to the server?\n\nThe answer is, a request which has a \u003Cu>Content-Range\u003C/u>. The specifics of the request is down to the browser. Some servers cannot handle Content Ranges, so they will send the entire file in a single response. Not only is this slow, but also memory inefficient. Video files can be many GBs.\n\nUsually, browsers will send a [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request when requesting a piece of media.\n\n![GET Request in Firefox Video Element](/assets/2-1-Video-Get.png)\nHere, we can see that Firefox is sending a GET request for the video.\n\n#### Keen ones might notice the HTTP 206 response code, we will put a pin on it for now.\n\n![](/assets/2-2-Vid-Req.png)\nAs you can see, the client sends a request for all the bytes. If the server has logic to handle Content-Ranges, it will send back the total size(bytes) of the video. \u003Cu>It becomes the client's responsibility to chunk the video and ask for the pieces in accordance to the user's bandwidth.\u003C/u>\n\n![](/assets/2-3-Progressive-Download.png)\n\nHere, the browser chunks the video and downloads 6.5 MBs of data. The browser has the choice to download more or less.\n\n# How does Go handle this request?\n\nThis will be covered in the next blog, but for now, you can take a look at the Static Server implementation inside [net->http->fs.go](https://github.com/golang/go/blob/master/src/net/http/fs.go).\n\n# Next:\n\n* Go's static server implementation of Video Steaming.\n* How to account for Bandwidth.\n* Bit Rates.\n* Adaptive Bit Rate protocols \\[A Primer].\n* HLS, DASH, MSS.\n* Implementation of players.\n* FFMPEG.\n\n# Further Reading:\n\n* The HTML 5 Video W3C standard: [https://www.w3.org/TR/2011/WD-html5-20110113/video.html](https://www.w3.org/TR/2011/WD-html5-20110113/video.html)\n* HTML Video Encoding: [https://imagekit.io/blog/html5-video-encoding/](https://imagekit.io/blog/html5-video-encoding/)\n\n# Readings related to upcoming Blogs:\n\n* Digital Video Encoding Primer: [https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video\\_concepts](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_concepts)","posts/video-streaming-in-go-part-2.md","1aa9405f56151d17",{"html":82,"metadata":83},"\u003Cp>This is the second part in a series of blogs on Video Streaming. Check out the first part: \u003Ca href=\"/post/video-streaming-intro/\">Video Streaming in Go [Part 1]\u003C/a>\u003C/p>\n\u003Ch1 id=\"what-have-we-learned-so-far\">What have we learned so far?\u003C/h1>\n\u003Cp>We can “stream” video using a static server. But we are not in control of anything!\u003C/p>\n\u003Ch1 id=\"next-steps\">Next Steps\u003C/h1>\n\u003Col>\n\u003Cli>Somehow send data ourselves and not abstract it away.\u003C/li>\n\u003Cli>Account for Bandwidth and other video constraints.\u003C/li>\n\u003Cli>Maybe code custom input methods like Speed-Up, Slow-Down, change quality.\netc.\u003C/li>\n\u003C/ol>\n\u003Cp>But all of these are high level objectives. We need a good base and build up to these. \u003Cbr> \u003Cbr>\u003C/p>\n\u003Ch1 id=\"the-html-video-element\">The HTML Video Element\u003C/h1>\n\u003Cp>The first key to controlling everything is understanding the \u003Cb>\u003Cu>output field\u003C/u>\u003C/b>. Almost all web based video playback uses the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">HTML5 Video\u003C/a> element.\u003C/p>\n\u003Cp>You can technically make your own video player but it’s more hassle than what it’s worth. I plan to cover what used to be done pre-HTML 5 Video days in another blog.\u003C/p>\n\u003Cp>For now, the only thing we care about is the fact that the Video Element takes in a \u003Ca href=\"https://webmasters.stackexchange.com/questions/19101/what-is-the-difference-between-a-uri-and-a-url\">URL\u003C/a> and a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats\">MIME Type\u003C/a>.\u003Cbr> \u003Cbr>\u003C/p>\n\u003Ch1 id=\"simple-way-to-use-the-video-element\">Simple way to use the &#x3C;video> element\u003C/h1>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">From MDN\u003C/a>:\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#C792EA\"> controls\u003C/span>\u003Cspan style=\"color:#C792EA\"> width\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">250\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You specify the \u003Cu>source\u003C/u> and the \u003Cu>MIME-Type\u003C/u> and the browser requests the said media.\u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>Now, we will see a more comprehensive example:\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#C792EA\"> controls\u003C/span>\u003Cspan style=\"color:#C792EA\"> width\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">250\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.webm\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/webm\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">  Download the\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#C792EA\"> href\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.webm\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">WEBM\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">  or\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#C792EA\"> href\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">MP4\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">  video.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here, we list the MIME-Type in \u003Cu>descending order\u003C/u> of importance. I.e Given that a client has all the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs\">codecs\u003C/a> listed above, it will choose \u003Cu>\u003Cb>WebM first\u003C/b>\u003C/u>. \u003Cu>If\u003C/u> it does not have the WebM codec \u003Cu>then only\u003C/u> will it choose the MP4 format to stream.\u003C/p>\n\u003Ch1 id=\"http-content-ranges\">HTTP Content Ranges\u003C/h1>\n\u003Cul>\n\u003Cli>What \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">request\u003C/a> does the video element send to the server?\u003C/li>\n\u003C/ul>\n\u003Cp>The answer is, a request which has a \u003Cu>Content-Range\u003C/u>. The specifics of the request is down to the browser. Some servers cannot handle Content Ranges, so they will send the entire file in a single response. Not only is this slow, but also memory inefficient. Video files can be many GBs.\u003C/p>\n\u003Cp>Usually, browsers will send a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\">GET\u003C/a> request when requesting a piece of media.\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/2-1-Video-Get.png\" alt=\"GET Request in Firefox Video Element\">\nHere, we can see that Firefox is sending a GET request for the video.\u003C/p>\n\u003Ch4 id=\"keen-ones-might-notice-the-http-206-response-code-we-will-put-a-pin-on-it-for-now\">Keen ones might notice the HTTP 206 response code, we will put a pin on it for now.\u003C/h4>\n\u003Cp>\u003Cimg src=\"/assets/2-2-Vid-Req.png\" alt=\"\">\nAs you can see, the client sends a request for all the bytes. If the server has logic to handle Content-Ranges, it will send back the total size(bytes) of the video. \u003Cu>It becomes the client’s responsibility to chunk the video and ask for the pieces in accordance to the user’s bandwidth.\u003C/u>\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/2-3-Progressive-Download.png\" alt=\"\">\u003C/p>\n\u003Cp>Here, the browser chunks the video and downloads 6.5 MBs of data. The browser has the choice to download more or less.\u003C/p>\n\u003Ch1 id=\"how-does-go-handle-this-request\">How does Go handle this request?\u003C/h1>\n\u003Cp>This will be covered in the next blog, but for now, you can take a look at the Static Server implementation inside \u003Ca href=\"https://github.com/golang/go/blob/master/src/net/http/fs.go\">net->http->fs.go\u003C/a>.\u003C/p>\n\u003Ch1 id=\"next\">Next:\u003C/h1>\n\u003Cul>\n\u003Cli>Go’s static server implementation of Video Steaming.\u003C/li>\n\u003Cli>How to account for Bandwidth.\u003C/li>\n\u003Cli>Bit Rates.\u003C/li>\n\u003Cli>Adaptive Bit Rate protocols [A Primer].\u003C/li>\n\u003Cli>HLS, DASH, MSS.\u003C/li>\n\u003Cli>Implementation of players.\u003C/li>\n\u003Cli>FFMPEG.\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"further-reading\">Further Reading:\u003C/h1>\n\u003Cul>\n\u003Cli>The HTML 5 Video W3C standard: \u003Ca href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html\">https://www.w3.org/TR/2011/WD-html5-20110113/video.html\u003C/a>\u003C/li>\n\u003Cli>HTML Video Encoding: \u003Ca href=\"https://imagekit.io/blog/html5-video-encoding/\">https://imagekit.io/blog/html5-video-encoding/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"readings-related-to-upcoming-blogs\">Readings related to upcoming Blogs:\u003C/h1>\n\u003Cul>\n\u003Cli>Digital Video Encoding Primer: \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_concepts\">https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_concepts\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":84,"imagePaths":115,"frontmatter":73},[85,88,91,94,97,100,103,106,109,112],{"depth":41,"slug":86,"text":87},"what-have-we-learned-so-far","What have we learned so far?",{"depth":41,"slug":89,"text":90},"next-steps","Next Steps",{"depth":41,"slug":92,"text":93},"the-html-video-element","The HTML Video Element",{"depth":41,"slug":95,"text":96},"simple-way-to-use-the-video-element","Simple way to use the \u003Cvideo> element",{"depth":41,"slug":98,"text":99},"http-content-ranges","HTTP Content Ranges",{"depth":61,"slug":101,"text":102},"keen-ones-might-notice-the-http-206-response-code-we-will-put-a-pin-on-it-for-now","Keen ones might notice the HTTP 206 response code, we will put a pin on it for now.",{"depth":41,"slug":104,"text":105},"how-does-go-handle-this-request","How does Go handle this request?",{"depth":41,"slug":107,"text":108},"next","Next:",{"depth":41,"slug":110,"text":111},"further-reading","Further Reading:",{"depth":41,"slug":113,"text":114},"readings-related-to-upcoming-blogs","Readings related to upcoming Blogs:",[]]