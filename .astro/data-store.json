[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.0.5","config-digest","f756207bb1b45114","posts",["Map",9,10,25,26,71,72,116,117,149,150],"hello-world",{"id":9,"data":11,"body":17,"filePath":18,"digest":19,"rendered":20},{"title":12,"slug":9,"description":13,"added":14,"tags":15},"Hello, world!","This is an example blog!",["Date","2024-12-27T18:30:00.000Z"],[16],"personal","Hi Guys, by the grace of Lord Ganesha, I'm starting a technical blog documenting my adventures. Hope y'all enjoy it!","posts/hello-world.md","e802cdbc55b7c175",{"html":21,"metadata":22},"\u003Cp>Hi Guys, by the grace of Lord Ganesha, I’m starting a technical blog documenting my adventures. Hope y’all enjoy it!\u003C/p>",{"headings":23,"imagePaths":24,"frontmatter":11},[],[],"video-streaming-intro",{"id":25,"data":27,"body":33,"filePath":34,"digest":35,"rendered":36},{"title":28,"slug":25,"description":29,"added":30,"tags":31},"Video Streaming in Go [Part 1]","This series goes through how a generic video streaming website functions.",["Date","2024-12-31T18:30:00.000Z"],[32],"technical","I have been messing around with video streaming tech over the past few months for [GoSeek](https://github.com/ShabarishRamaswamy/GoSeek), this series of blogs are an account of my personal journey into discovering how video streaming works!\n\nBefore diving deep into the topic, we should answer some of these basic questions:\n\n* How does the web handle data?\n* What even is streaming?\n* What is Video?\n* How can I stream video? (Lmao recursion)\n\n\u003Cbr>\nLet us start with the most basic question first:\n\n# How does web handle data?\n\nThere are a number of ways data is shared on the web, most popular of which is [HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview). But HTTP works on \u003Cu>text\u003C/u>. And \u003Cu>video data is clearly not text\u003C/u>!\u003Cbr>\n\nThe answer to this lies in the spec itself. Although the request and response formats are text based, the payload data shared during the request or the response can be \u003Cu>anything\u003C/u>, refer [HTTP 1.0+ Content-Type](https://www.w3.org/Protocols/HTTP/1.0/spec.html#Content-Type). \u003Cbr>\u003Cbr>\n\n# Data can be anything, so what?\n\nOur primary intuition can be to transfer video as \u003Cu>binary\u003C/u> data which can be decoded and displayed. This is easier said than done. This was the way in which videos were served pre [HTML5 Video](https://en.wikipedia.org/wiki/HTML_video) era. Back then, you had to use Flash Player or roll your own video decoder on the client side to even display videos, \u003Cu>Crazy Times!\u003C/u>.\u003Cbr>\u003Cbr>\n\n# What even is Video?\n\n\u003Cu>It's just a bunch of images with an overlayed audio\u003C/u>. In reality, videos are much more complicated than that, having complex compression mechanisms, encoding and decoding steps, etc. We might or might not visit these steps in detail in this series. \u003Cbr> \u003Cbr>\n\n# HTML 5 Video\n\nThe HTML spec now natively supports [video](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video). In the frontend you can specify a source [URI](https://datatracker.ietf.org/doc/html/rfc3986#section-1.1) and a [codec/type](https://en.wikipedia.org/wiki/Video_codec). The browser fetches this video and starts playing. \u003Cbr>\u003Cbr>\n\n## This is where things get interesting.\n\nYou can now run a static content webserver eg. [Go's FileServer](https://pkg.go.dev/net/http#FileServer) and the video should work as expected.\n\n# Working Example\n\n#### Go FileServer\n\nThis hosts the static files.\n\n```go\nhttp.Handle(\"/Static-Content/\", http.StripPrefix(\"/Static-Content/\", http.FileServer(http.Dir(\"./Static-Content\"))))\n```\n\nAll this says is, whenever you get a request for /Static-Content/\\* just map it to the contents in the Static-Content folder.\n\nE.g. GET /Static-Content/index.html serves the index.html\n\n```\nStatic-Content\n  index.html\n  video.mp4\nmain.go\ngo.mod\n```\n\nFull Working Example:\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"path/filepath\"\n\t\"text/template\"\n)\n\ntype VideoPath struct {\n\tVideoPath string\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/play-video\", defaultImplementation)\n\thttp.Handle(\"/Static-Content/\", http.StripPrefix(\"/Static-Content/\", http.FileServer(http.Dir(\"./Static-Content\"))))\n\tlog.Fatal(http.ListenAndServe(\":5005\", nil))\n}\n\nfunc defaultImplementation(w http.ResponseWriter, r *http.Request) {\n\tvp := VideoPath{VideoPath: \"/Static-Content/video.mp4\"}\n\tdefaultImplementationPath := filepath.Join(\"./\", \"Static-Content\", \"default.html\")\n\n\ttemplate.Must(template.ParseFiles(defaultImplementationPath)).Execute(w, vp)\n}\n```\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n\u003Chead>\n    \u003Cmeta charset=\"UTF-8\">\n    \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    \u003Ctitle>HTML 5 Video\u003C/title>\n\u003C/head>\n\n\u003Cbody>\n    \u003Cdiv>\n        \u003Cp>Static Video\u003C/p>\n        \n        \u003Cvideo controls id=\"video\">\n            \u003Csource src=\"{{.VideoPath}}\" type=\"video/mp4\">\n            Your browser does not support the video tag.\n        \u003C/video>\n        \n    \u003C/div>\n\u003C/body>\n\u003C/html>\n```\n\nOutput:\n\n![](\u003C/assets/Screenshot 2024-12-29 at 2.33.35 AM.png>)\n\n# Is this it?\n\nNope!\nThis is just the beginning.\n\nFor the curious, you might be thinking, \"But we didn't touch the video at all\". And that's true. In this implementation we are not in control! The Static server does the work for us, but for a video streaming website, \u003Cu>WE NEED TO BE IN CONTROL!\u003C/u> \u003Cbr>\u003Cbr>\n\nIn the following blogs we will cover:\n\n1. How Static Sites actually send the video.\n2. HTTP Content Ranges.\n3. Video Encoder/Decoders (Codecs).\n4. Adaptive Bitrates.\n5. Streaming Standards like Apple HLS, Microsoft Smooth, MPEG-DASH. \u003Cbr>\n\n# and much more.\n\nSo stay tuned for the next week's blog!","posts/video-streaming-intro.md","a8849e8e3dd1d010",{"html":37,"metadata":38},"\u003Cp>I have been messing around with video streaming tech over the past few months for \u003Ca href=\"https://github.com/ShabarishRamaswamy/GoSeek\">GoSeek\u003C/a>, this series of blogs are an account of my personal journey into discovering how video streaming works!\u003C/p>\n\u003Cp>Before diving deep into the topic, we should answer some of these basic questions:\u003C/p>\n\u003Cul>\n\u003Cli>How does the web handle data?\u003C/li>\n\u003Cli>What even is streaming?\u003C/li>\n\u003Cli>What is Video?\u003C/li>\n\u003Cli>How can I stream video? (Lmao recursion)\u003C/li>\n\u003C/ul>\n\u003Cbr>\nLet us start with the most basic question first:\n\u003Ch1 id=\"how-does-web-handle-data\">How does web handle data?\u003C/h1>\n\u003Cp>There are a number of ways data is shared on the web, most popular of which is \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">HTTP\u003C/a>. But HTTP works on \u003Cu>text\u003C/u>. And \u003Cu>video data is clearly not text\u003C/u>!\u003Cbr>\u003C/p>\n\u003Cp>The answer to this lies in the spec itself. Although the request and response formats are text based, the payload data shared during the request or the response can be \u003Cu>anything\u003C/u>, refer \u003Ca href=\"https://www.w3.org/Protocols/HTTP/1.0/spec.html#Content-Type\">HTTP 1.0+ Content-Type\u003C/a>. \u003Cbr>\u003Cbr>\u003C/p>\n\u003Ch1 id=\"data-can-be-anything-so-what\">Data can be anything, so what?\u003C/h1>\n\u003Cp>Our primary intuition can be to transfer video as \u003Cu>binary\u003C/u> data which can be decoded and displayed. This is easier said than done. This was the way in which videos were served pre \u003Ca href=\"https://en.wikipedia.org/wiki/HTML_video\">HTML5 Video\u003C/a> era. Back then, you had to use Flash Player or roll your own video decoder on the client side to even display videos, \u003Cu>Crazy Times!\u003C/u>.\u003Cbr>\u003Cbr>\u003C/p>\n\u003Ch1 id=\"what-even-is-video\">What even is Video?\u003C/h1>\n\u003Cp>\u003Cu>It’s just a bunch of images with an overlayed audio\u003C/u>. In reality, videos are much more complicated than that, having complex compression mechanisms, encoding and decoding steps, etc. We might or might not visit these steps in detail in this series. \u003Cbr> \u003Cbr>\u003C/p>\n\u003Ch1 id=\"html-5-video\">HTML 5 Video\u003C/h1>\n\u003Cp>The HTML spec now natively supports \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">video\u003C/a>. In the frontend you can specify a source \u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc3986#section-1.1\">URI\u003C/a> and a \u003Ca href=\"https://en.wikipedia.org/wiki/Video_codec\">codec/type\u003C/a>. The browser fetches this video and starts playing. \u003Cbr>\u003Cbr>\u003C/p>\n\u003Ch2 id=\"this-is-where-things-get-interesting\">This is where things get interesting.\u003C/h2>\n\u003Cp>You can now run a static content webserver eg. \u003Ca href=\"https://pkg.go.dev/net/http#FileServer\">Go’s FileServer\u003C/a> and the video should work as expected.\u003C/p>\n\u003Ch1 id=\"working-example\">Working Example\u003C/h1>\n\u003Ch4 id=\"go-fileserver\">Go FileServer\u003C/h4>\n\u003Cp>This hosts the static files.\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Handle\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">StripPrefix\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">FileServer\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Dir\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">./Static-Content\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">))))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>All this says is, whenever you get a request for /Static-Content/* just map it to the contents in the Static-Content folder.\u003C/p>\n\u003Cp>E.g. GET /Static-Content/index.html serves the index.html\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Static-Content\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  index.html\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>  video.mp4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>main.go\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>go.mod\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Full Working Example:\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">package\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> main\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF;font-style:italic\">import\u003C/span>\u003Cspan style=\"color:#89DDFF\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">log\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">net/http\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">path/filepath\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">\t\"\u003C/span>\u003Cspan style=\"color:#FFCB6B\">text/template\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">type\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> VideoPath\u003C/span>\u003Cspan style=\"color:#89DDFF\"> struct\u003C/span>\u003Cspan style=\"color:#89DDFF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tVideoPath \u003C/span>\u003Cspan style=\"color:#C792EA\">string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">func\u003C/span>\u003Cspan style=\"color:#82AAFF\"> main\u003C/span>\u003Cspan style=\"color:#89DDFF\">()\u003C/span>\u003Cspan style=\"color:#89DDFF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\thttp\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">HandleFunc\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/play-video\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> defaultImplementation\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\thttp\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Handle\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">StripPrefix\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">FileServer\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Dir\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">./Static-Content\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">))))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tlog\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Fatal\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">ListenAndServe\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">:5005\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#89DDFF\"> nil))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">func\u003C/span>\u003Cspan style=\"color:#82AAFF\"> defaultImplementation\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF;font-style:italic\">w\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FFCB6B\">ResponseWriter\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF;font-style:italic\"> r\u003C/span>\u003Cspan style=\"color:#89DDFF\"> *\u003C/span>\u003Cspan style=\"color:#FFCB6B\">http\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#FFCB6B\">Request\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003Cspan style=\"color:#89DDFF\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tvp \u003C/span>\u003Cspan style=\"color:#89DDFF\">:=\u003C/span>\u003Cspan style=\"color:#FFCB6B\"> VideoPath\u003C/span>\u003Cspan style=\"color:#89DDFF\">{\u003C/span>\u003Cspan style=\"color:#EEFFFF\">VideoPath\u003C/span>\u003Cspan style=\"color:#89DDFF\">:\u003C/span>\u003Cspan style=\"color:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/Static-Content/video.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\tdefaultImplementationPath \u003C/span>\u003Cspan style=\"color:#89DDFF\">:=\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> filepath\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Join\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">./\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#C3E88D\">Static-Content\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#89DDFF\"> \"\u003C/span>\u003Cspan style=\"color:#C3E88D\">default.html\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">\ttemplate\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">Must\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">template\u003C/span>\u003Cspan style=\"color:#89DDFF\">.\u003C/span>\u003Cspan style=\"color:#82AAFF\">ParseFiles\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">defaultImplementationPath\u003C/span>\u003Cspan style=\"color:#89DDFF\">)).\u003C/span>\u003Cspan style=\"color:#82AAFF\">Execute\u003C/span>\u003Cspan style=\"color:#89DDFF\">(\u003C/span>\u003Cspan style=\"color:#EEFFFF\">w\u003C/span>\u003Cspan style=\"color:#89DDFF\">,\u003C/span>\u003Cspan style=\"color:#EEFFFF\"> vp\u003C/span>\u003Cspan style=\"color:#89DDFF\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#F07178\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#C792EA\"> html\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">html\u003C/span>\u003Cspan style=\"color:#C792EA\"> lang\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">en\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">head\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">meta\u003C/span>\u003Cspan style=\"color:#C792EA\"> charset\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">UTF-8\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">meta\u003C/span>\u003Cspan style=\"color:#C792EA\"> name\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">viewport\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> content\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">width=device-width, initial-scale=1.0\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">title\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">HTML 5 Video\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">title\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">head\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">body\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">div\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">p\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">Static Video\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">p\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#C792EA\"> controls\u003C/span>\u003Cspan style=\"color:#C792EA\"> id\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">{{.VideoPath}}\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">            Your browser does not support the video tag.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">div\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">body\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">html\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Output:\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/Screenshot 2024-12-29 at 2.33.35 AM.png\" alt=\"\">\u003C/p>\n\u003Ch1 id=\"is-this-it\">Is this it?\u003C/h1>\n\u003Cp>Nope!\nThis is just the beginning.\u003C/p>\n\u003Cp>For the curious, you might be thinking, “But we didn’t touch the video at all”. And that’s true. In this implementation we are not in control! The Static server does the work for us, but for a video streaming website, \u003Cu>WE NEED TO BE IN CONTROL!\u003C/u> \u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>In the following blogs we will cover:\u003C/p>\n\u003Col>\n\u003Cli>How Static Sites actually send the video.\u003C/li>\n\u003Cli>HTTP Content Ranges.\u003C/li>\n\u003Cli>Video Encoder/Decoders (Codecs).\u003C/li>\n\u003Cli>Adaptive Bitrates.\u003C/li>\n\u003Cli>Streaming Standards like Apple HLS, Microsoft Smooth, MPEG-DASH. \u003Cbr>\u003C/li>\n\u003C/ol>\n\u003Ch1 id=\"and-much-more\">and much more.\u003C/h1>\n\u003Cp>So stay tuned for the next week’s blog!\u003C/p>",{"headings":39,"imagePaths":70,"frontmatter":27},[40,44,47,50,53,57,60,64,67],{"depth":41,"slug":42,"text":43},1,"how-does-web-handle-data","How does web handle data?",{"depth":41,"slug":45,"text":46},"data-can-be-anything-so-what","Data can be anything, so what?",{"depth":41,"slug":48,"text":49},"what-even-is-video","What even is Video?",{"depth":41,"slug":51,"text":52},"html-5-video","HTML 5 Video",{"depth":54,"slug":55,"text":56},2,"this-is-where-things-get-interesting","This is where things get interesting.",{"depth":41,"slug":58,"text":59},"working-example","Working Example",{"depth":61,"slug":62,"text":63},4,"go-fileserver","Go FileServer",{"depth":41,"slug":65,"text":66},"is-this-it","Is this it?",{"depth":41,"slug":68,"text":69},"and-much-more","and much more.",[],"video-streaming-in-go-part-2",{"id":71,"data":73,"body":78,"filePath":79,"digest":80,"rendered":81},{"title":74,"slug":71,"description":75,"added":76,"tags":77},"Video Streaming in Go [Part 2] - Client Request, HTTP Ranges","Learn about the \u003CVideo> tag, HTTP Content Ranges and more.",["Date","2025-02-01T08:00:00.000Z"],[32],"This is the second part in a series of blogs on Video Streaming. Check out the first part: [Video Streaming in Go \\[Part 1\\]](/post/video-streaming-intro/)\n\n# What have we learned so far?\n\nWe can \"stream\" video using a static server. But we are not in control of anything!\n\n# Next Steps\n\n1. Somehow send data ourselves and not abstract it away.\n2. Account for Bandwidth and other video constraints.\n3. Maybe code custom input methods like Speed-Up, Slow-Down, change quality.\n   etc.\n\nBut all of these are high level objectives. We need a good base and build up to these. \u003Cbr> \u003Cbr>\n\n# The HTML Video Element\n\nThe first key to controlling everything is understanding the \u003Cb>\u003Cu>output field\u003C/u>\u003C/b>. Almost all web based video playback uses the [HTML5 Video](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) element.\n\nYou can technically make your own video player but it's more hassle than what it's worth. I plan to cover what used to be done pre-HTML 5 Video days in another blog.\n\nFor now, the only thing we care about is the fact that the Video Element takes in a [URL](https://webmasters.stackexchange.com/questions/19101/what-is-the-difference-between-a-uri-and-a-url) and a [MIME Type](https://developer.mozilla.org/en-US/docs/Web/Media/Formats).\u003Cbr> \u003Cbr>\n\n# Simple way to use the \\\u003Cvideo> element\n\n[From MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video):\n\n```html\n\u003Cvideo controls width=\"250\">\n  \u003Csource src=\"/media/cc0-videos/flower.mp4\" type=\"video/mp4\" />\n\u003C/video>\n```\n\nYou specify the \u003Cu>source\u003C/u> and the \u003Cu>MIME-Type\u003C/u> and the browser requests the said media.\u003Cbr>\u003Cbr>\n\nNow, we will see a more comprehensive example:\n\n```html\n\u003Cvideo controls width=\"250\">\n  \u003Csource src=\"/media/cc0-videos/flower.webm\" type=\"video/webm\" />\n\n  \u003Csource src=\"/media/cc0-videos/flower.mp4\" type=\"video/mp4\" />\n\n  Download the\n  \u003Ca href=\"/media/cc0-videos/flower.webm\">WEBM\u003C/a>\n  or\n  \u003Ca href=\"/media/cc0-videos/flower.mp4\">MP4\u003C/a>\n  video.\n\u003C/video>\n```\n\nHere, we list the MIME-Type in \u003Cu>descending order\u003C/u> of importance. I.e Given that a client has all the [codecs](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs) listed above, it will choose \u003Cu>\u003Cb>WebM first\u003C/b>\u003C/u>. \u003Cu>If\u003C/u> it does not have the WebM codec \u003Cu>then only\u003C/u> will it choose the MP4 format to stream.\n\n# HTTP Content Ranges\n\n* What [request](https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview) does the video element send to the server?\n\nThe answer is, a request which has a \u003Cu>Content-Range\u003C/u>. The specifics of the request is down to the browser. Some servers cannot handle Content Ranges, so they will send the entire file in a single response. Not only is this slow, but also memory inefficient. Video files can be many GBs.\n\nUsually, browsers will send a [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request when requesting a piece of media.\n\n![GET Request in Firefox Video Element](/assets/2-1-Video-Get.png)\nHere, we can see that Firefox is sending a GET request for the video.\n\n#### Keen ones might notice the HTTP 206 response code, we will put a pin on it for now.\n\n![](/assets/2-2-Vid-Req.png)\nAs you can see, the client sends a request for all the bytes. If the server has logic to handle Content-Ranges, it will send back the total size(bytes) of the video. \u003Cu>It becomes the client's responsibility to chunk the video and ask for the pieces in accordance to the user's bandwidth.\u003C/u>\n\n![](/assets/2-3-Progressive-Download.png)\n\nHere, the browser chunks the video and downloads 6.5 MBs of data. The browser has the choice to download more or less.\n\n# How does Go handle this request?\n\nThis will be covered in the next blog, but for now, you can take a look at the Static Server implementation inside [net->http->fs.go](https://github.com/golang/go/blob/master/src/net/http/fs.go).\n\n# Next:\n\n* Go's static server implementation of Video Steaming.\n* How to account for Bandwidth.\n* Bit Rates.\n* Adaptive Bit Rate protocols \\[A Primer].\n* HLS, DASH, MSS.\n* Implementation of players.\n* FFMPEG.\n\n# Further Reading:\n\n* The HTML 5 Video W3C standard: [https://www.w3.org/TR/2011/WD-html5-20110113/video.html](https://www.w3.org/TR/2011/WD-html5-20110113/video.html)\n* HTML Video Encoding: [https://imagekit.io/blog/html5-video-encoding/](https://imagekit.io/blog/html5-video-encoding/)\n\n# Readings related to upcoming Blogs:\n\n* Digital Video Encoding Primer: [https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video\\_concepts](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_concepts)","posts/video-streaming-in-go-part-2.md","1aa9405f56151d17",{"html":82,"metadata":83},"\u003Cp>This is the second part in a series of blogs on Video Streaming. Check out the first part: \u003Ca href=\"/post/video-streaming-intro/\">Video Streaming in Go [Part 1]\u003C/a>\u003C/p>\n\u003Ch1 id=\"what-have-we-learned-so-far\">What have we learned so far?\u003C/h1>\n\u003Cp>We can “stream” video using a static server. But we are not in control of anything!\u003C/p>\n\u003Ch1 id=\"next-steps\">Next Steps\u003C/h1>\n\u003Col>\n\u003Cli>Somehow send data ourselves and not abstract it away.\u003C/li>\n\u003Cli>Account for Bandwidth and other video constraints.\u003C/li>\n\u003Cli>Maybe code custom input methods like Speed-Up, Slow-Down, change quality.\netc.\u003C/li>\n\u003C/ol>\n\u003Cp>But all of these are high level objectives. We need a good base and build up to these. \u003Cbr> \u003Cbr>\u003C/p>\n\u003Ch1 id=\"the-html-video-element\">The HTML Video Element\u003C/h1>\n\u003Cp>The first key to controlling everything is understanding the \u003Cb>\u003Cu>output field\u003C/u>\u003C/b>. Almost all web based video playback uses the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">HTML5 Video\u003C/a> element.\u003C/p>\n\u003Cp>You can technically make your own video player but it’s more hassle than what it’s worth. I plan to cover what used to be done pre-HTML 5 Video days in another blog.\u003C/p>\n\u003Cp>For now, the only thing we care about is the fact that the Video Element takes in a \u003Ca href=\"https://webmasters.stackexchange.com/questions/19101/what-is-the-difference-between-a-uri-and-a-url\">URL\u003C/a> and a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats\">MIME Type\u003C/a>.\u003Cbr> \u003Cbr>\u003C/p>\n\u003Ch1 id=\"simple-way-to-use-the-video-element\">Simple way to use the &#x3C;video> element\u003C/h1>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\">From MDN\u003C/a>:\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#C792EA\"> controls\u003C/span>\u003Cspan style=\"color:#C792EA\"> width\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">250\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You specify the \u003Cu>source\u003C/u> and the \u003Cu>MIME-Type\u003C/u> and the browser requests the said media.\u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>Now, we will see a more comprehensive example:\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#C792EA\"> controls\u003C/span>\u003Cspan style=\"color:#C792EA\"> width\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">250\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.webm\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/webm\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">source\u003C/span>\u003Cspan style=\"color:#C792EA\"> src\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C792EA\"> type\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">video/mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">  Download the\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#C792EA\"> href\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.webm\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">WEBM\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">  or\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#C792EA\"> href\u003C/span>\u003Cspan style=\"color:#89DDFF\">=\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#C3E88D\">/media/cc0-videos/flower.mp4\u003C/span>\u003Cspan style=\"color:#89DDFF\">\"\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003Cspan style=\"color:#EEFFFF\">MP4\u003C/span>\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">a\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#EEFFFF\">  video.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#89DDFF\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F07178\">video\u003C/span>\u003Cspan style=\"color:#89DDFF\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here, we list the MIME-Type in \u003Cu>descending order\u003C/u> of importance. I.e Given that a client has all the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs\">codecs\u003C/a> listed above, it will choose \u003Cu>\u003Cb>WebM first\u003C/b>\u003C/u>. \u003Cu>If\u003C/u> it does not have the WebM codec \u003Cu>then only\u003C/u> will it choose the MP4 format to stream.\u003C/p>\n\u003Ch1 id=\"http-content-ranges\">HTTP Content Ranges\u003C/h1>\n\u003Cul>\n\u003Cli>What \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview\">request\u003C/a> does the video element send to the server?\u003C/li>\n\u003C/ul>\n\u003Cp>The answer is, a request which has a \u003Cu>Content-Range\u003C/u>. The specifics of the request is down to the browser. Some servers cannot handle Content Ranges, so they will send the entire file in a single response. Not only is this slow, but also memory inefficient. Video files can be many GBs.\u003C/p>\n\u003Cp>Usually, browsers will send a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\">GET\u003C/a> request when requesting a piece of media.\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/2-1-Video-Get.png\" alt=\"GET Request in Firefox Video Element\">\nHere, we can see that Firefox is sending a GET request for the video.\u003C/p>\n\u003Ch4 id=\"keen-ones-might-notice-the-http-206-response-code-we-will-put-a-pin-on-it-for-now\">Keen ones might notice the HTTP 206 response code, we will put a pin on it for now.\u003C/h4>\n\u003Cp>\u003Cimg src=\"/assets/2-2-Vid-Req.png\" alt=\"\">\nAs you can see, the client sends a request for all the bytes. If the server has logic to handle Content-Ranges, it will send back the total size(bytes) of the video. \u003Cu>It becomes the client’s responsibility to chunk the video and ask for the pieces in accordance to the user’s bandwidth.\u003C/u>\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/2-3-Progressive-Download.png\" alt=\"\">\u003C/p>\n\u003Cp>Here, the browser chunks the video and downloads 6.5 MBs of data. The browser has the choice to download more or less.\u003C/p>\n\u003Ch1 id=\"how-does-go-handle-this-request\">How does Go handle this request?\u003C/h1>\n\u003Cp>This will be covered in the next blog, but for now, you can take a look at the Static Server implementation inside \u003Ca href=\"https://github.com/golang/go/blob/master/src/net/http/fs.go\">net->http->fs.go\u003C/a>.\u003C/p>\n\u003Ch1 id=\"next\">Next:\u003C/h1>\n\u003Cul>\n\u003Cli>Go’s static server implementation of Video Steaming.\u003C/li>\n\u003Cli>How to account for Bandwidth.\u003C/li>\n\u003Cli>Bit Rates.\u003C/li>\n\u003Cli>Adaptive Bit Rate protocols [A Primer].\u003C/li>\n\u003Cli>HLS, DASH, MSS.\u003C/li>\n\u003Cli>Implementation of players.\u003C/li>\n\u003Cli>FFMPEG.\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"further-reading\">Further Reading:\u003C/h1>\n\u003Cul>\n\u003Cli>The HTML 5 Video W3C standard: \u003Ca href=\"https://www.w3.org/TR/2011/WD-html5-20110113/video.html\">https://www.w3.org/TR/2011/WD-html5-20110113/video.html\u003C/a>\u003C/li>\n\u003Cli>HTML Video Encoding: \u003Ca href=\"https://imagekit.io/blog/html5-video-encoding/\">https://imagekit.io/blog/html5-video-encoding/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"readings-related-to-upcoming-blogs\">Readings related to upcoming Blogs:\u003C/h1>\n\u003Cul>\n\u003Cli>Digital Video Encoding Primer: \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_concepts\">https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_concepts\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":84,"imagePaths":115,"frontmatter":73},[85,88,91,94,97,100,103,106,109,112],{"depth":41,"slug":86,"text":87},"what-have-we-learned-so-far","What have we learned so far?",{"depth":41,"slug":89,"text":90},"next-steps","Next Steps",{"depth":41,"slug":92,"text":93},"the-html-video-element","The HTML Video Element",{"depth":41,"slug":95,"text":96},"simple-way-to-use-the-video-element","Simple way to use the \u003Cvideo> element",{"depth":41,"slug":98,"text":99},"http-content-ranges","HTTP Content Ranges",{"depth":61,"slug":101,"text":102},"keen-ones-might-notice-the-http-206-response-code-we-will-put-a-pin-on-it-for-now","Keen ones might notice the HTTP 206 response code, we will put a pin on it for now.",{"depth":41,"slug":104,"text":105},"how-does-go-handle-this-request","How does Go handle this request?",{"depth":41,"slug":107,"text":108},"next","Next:",{"depth":41,"slug":110,"text":111},"further-reading","Further Reading:",{"depth":41,"slug":113,"text":114},"readings-related-to-upcoming-blogs","Readings related to upcoming Blogs:",[],"http-gemini-gopher-and-other-protocols",{"id":116,"data":118,"body":123,"filePath":124,"digest":125,"rendered":126},{"title":119,"slug":116,"description":120,"added":121,"tags":122},"A tale of Winners, Losers and Bystanders - HTTP, Gemini, Gopher and others.","How HTTP won the war and other protocols got buried!",["Date","2025-03-01T08:00:00.000Z"],[32],"Who doesn't like HTTP. It is probably one of the best designed protocols. It is surprisingly simple for an industry standard!\n\nAt this point of time, almost 100% of internet traffic uses HTTP \\[At least for webpages]. But this was not always the case. In early days of the internet, before the standardization of HTTP, there were many other protocols. We will take a look at some of them!\n\nWe will start with the smaller ones.\n\n#### Note: Examples in this document may or may not be correct, it is based on my very limited understanding of these obscure protocols.\n\n# WAIS & Z39.50\n\nWAIS was created by Thinking Machines Inc. as a universal database server and terminal interface, it used the ANSI/NISO Z39.50 protocol. The Z39.50 was one of the first standardized federated databases protocols.\n\nIt is a \u003Cb>client-server application layer protocol\u003C/b> mainly used in the databases domain. It came with a natural language query system known as the \u003Cb>Contextual Query Language\u003C/b> by virtue of which it allowed all of the WAIS Interfaces to talk to any of the WAIS Databases.\n\nInitially Z39.50 was not compatible with TCP/IP as it was made for the OSI protocol. After a few iterations, they made it compatible with TCP/IP. Later, it was obsoleted by one of its replacements, which used HTTP to maintain backward compatibility with the Query Syntax.\n\n> Z39.50 thus offers an excellent case study of the problems involved in managing the evolution of a standard over time. It may well offer useful lessons for the future of other standards such as HTTP and HTML, which seem to be facing some of the same issues. \\\n> \\~ [D-Lib Magazine, April 1997](https://dlib.org/dlib/april97/04lynch.html).\n\nRequest/Respone\n\n```\nRequest:\nconnect z3950.loc.gov:7090/voyager\nsearch \"library mashups\"\nshow 0 1\nquit\n\nResponse:\nz3950.loc.gov:7090/voyager: 2 hits\n0 database=VOYAGER syntax=USmarc schema=unknown\n...\n```\n\n# Usenet/NNTP\n\nThe Network News Transfer Protocol \\[NNTP] was a pre-web protocol for transferring usenet articles from one network to another. It used Unix-To-Unix Copy \\[UUCP] before TCP/IP. With the rise of the web, it was re-codified to use SMTP like syntax over TCP/IP.\n\nNNTP enables both server-server and client-server communication for exchanging and serving newsgroup articles. NNTP used IANA authorized TCP-NoTLS:119 and TCP-TLS:563.\n\nRequest/Response\n\n```\nInit Connection\n...\nClient: LIST\nServer: 215 list of newsgroups follows\nServer: net.server 00543 00501 y\nServer: net.server2 10125 10011 y\nServer: .\nClient: GROUP net.server2\nServer: 211 104 10011 10125 net.server2 group selected\n...\n```\n\n# Gopher\n\nThe Gopher protocol was created to distribute text! \\[Mostly-text based documents to be more precise]. It was the HTTP before the birth of HTTP. This protocol predates the web by mere months. This was perhaps the most dominant protocol for internet communication before HTTP became the standard in mid-to-late 90s.\n\nIt was created by the University of Minnesota to act as a campus wide public bulletin board. With the rise of TCP/IP and the web in general, Gopher grew exponentially. It was mainly created to distribute textual documents in a menu-driven way.\n\nFailure to innovate under broader scope of the web \\[serving images, videos and interactivity] paired with their decision to charge royalty for their implementation of a Gopher server led to the ultimate and quick demise of the Gopher protocol.\n\nRequest/Respone\n\n```\n/Reference\n1CIA World Factbook     /Archives/mirrors/textfiles.com/politics/CIA    gopher.quux.org 70\n0Jargon 4.2.0   /Reference/Jargon 4.2.0 gopher.quux.org 70      +\n1Online Libraries       /Reference/Online Libraries     gopher.quux.org 70     +\n1RFCs: Internet Standards       /Computers/Standards and Specs/RFC      gopher.quux.org 70\n1U.S. Gazetteer /Reference/U.S. Gazetteer       gopher.quux.org 70      +\niThis file contains information on United States        fake    (NULL)  0\nicities, counties, and geographical areas.  It has      fake    (NULL)  0\nilatitude/longitude, population, land and water area,   fake    (NULL)  0\niand ZIP codes. fake    (NULL)  0\ni       fake    (NULL)  0\niTo search for a city, enter the city's name.  To search        fake    (NULL) 0\nifor a county, use the name plus County -- for instance,        fake    (NULL) 0\niDallas County. fake    (NULL)  0\n```\n\nSeems complex, but is really easy-ish when you read the documentation.\n\n# Gemini\n\nGemini is a new attempt at creating a privacy-first bloat-free web. Started in 2019, it attempts to be a text-based alternative to the traditional web. It is a spiritual successor of the Gopher protocol.\n\nWhat differentiates the modern web and Gemini is the fact that Gemini has no client-side scripts. It can serve images and videos, but those will be downloaded to your machine and not played using the Gemini protocol \\[I.e not inside of a standard Gemini browser].\n\nDocuments are written in plain-text or a special markdown/HTML like syntax called GemText markup. The protocol mandates the use of TLS and thus is secure by default.\n\nRequest/Response\n\n```\nClient: [opens connection]\nClient: \"gemini://example.net/search\" CRLF\nServer: \"10 Please input a search term\" CRLF\nServer: [closes connection]\nClient: [prompts user, gets input]\nClient: [opens connection]\nClient: \"gemini://example.net/search?gemini%20search%20engines\" CRLF\nServer: \"20 \" mimetype CRLF content...\nServer: [closes connection]\n```\n\n# Sources\n\nZ39.50\n\n* [https://dlib.org/dlib/april97/04lynch.html](https://dlib.org/dlib/april97/04lynch.html).\n* [https://en.wikipedia.org/wiki/Z39.50](https://en.wikipedia.org/wiki/Z39.50)\n* [https://www.youtube.com/watch?v=KvmjB8gg7KY](https://www.youtube.com/watch?v=KvmjB8gg7KY)\n* [https://groups.niso.org/higherlogic/ws/public/download/14978/z39-50-2003\\_s2014.pdf](https://groups.niso.org/higherlogic/ws/public/download/14978/z39-50-2003_s2014.pdf)\n* [https://www.datamercs.net/posts/2020-08-15-z3950-for-dummies/](https://www.datamercs.net/posts/2020-08-15-z3950-for-dummies/)\n\nFurther Reading\n\n* [https://www.rfc-editor.org/rfc/rfc1729.txt](https://www.rfc-editor.org/rfc/rfc1729.txt)\n\nNNTP\n\n* [https://datatracker.ietf.org/doc/html/rfc977](https://datatracker.ietf.org/doc/html/rfc977)\n* Updates on 977: [https://datatracker.ietf.org/doc/html/rfc3977](https://datatracker.ietf.org/doc/html/rfc3977)\n* [https://en.wikipedia.org/wiki/Network\\_News\\_Transfer\\_Protocol](https://en.wikipedia.org/wiki/Network_News_Transfer_Protocol)\n* [https://techterms.com/definition/nntp](https://techterms.com/definition/nntp)\n\nGopher\n\n* [https://en.wikipedia.org/wiki/Gopher\\_(protocol)](https://en.wikipedia.org/wiki/Gopher_\\(protocol\\))\n* [https://www.youtube.com/watch?v=QGCSYyH2r6k](https://www.youtube.com/watch?v=QGCSYyH2r6k)\n\nGemini\n\n* [https://geminiprotocol.net/](https://geminiprotocol.net/)\n* [https://en.wikipedia.org/wiki/Gemini\\_(protocol)](https://en.wikipedia.org/wiki/Gemini_\\(protocol\\))\n* [https://www.youtube.com/watch?v=DoEI6VzybDk](https://www.youtube.com/watch?v=DoEI6VzybDk)\n* [https://www.youtube.com/watch?v=K-en4nEV5Xc](https://www.youtube.com/watch?v=K-en4nEV5Xc)\n* [https://geminiprotocol.net/docs/protocol-specification.gmi](https://geminiprotocol.net/docs/protocol-specification.gmi)","posts/http-gemini-gopher-and-other-protocols.md","e3f86a7cdf05c056",{"html":127,"metadata":128},"\u003Cp>Who doesn’t like HTTP. It is probably one of the best designed protocols. It is surprisingly simple for an industry standard!\u003C/p>\n\u003Cp>At this point of time, almost 100% of internet traffic uses HTTP [At least for webpages]. But this was not always the case. In early days of the internet, before the standardization of HTTP, there were many other protocols. We will take a look at some of them!\u003C/p>\n\u003Cp>We will start with the smaller ones.\u003C/p>\n\u003Ch4 id=\"note-examples-in-this-document-may-or-may-not-be-correct-it-is-based-on-my-very-limited-understanding-of-these-obscure-protocols\">Note: Examples in this document may or may not be correct, it is based on my very limited understanding of these obscure protocols.\u003C/h4>\n\u003Ch1 id=\"wais--z3950\">WAIS &#x26; Z39.50\u003C/h1>\n\u003Cp>WAIS was created by Thinking Machines Inc. as a universal database server and terminal interface, it used the ANSI/NISO Z39.50 protocol. The Z39.50 was one of the first standardized federated databases protocols.\u003C/p>\n\u003Cp>It is a \u003Cb>client-server application layer protocol\u003C/b> mainly used in the databases domain. It came with a natural language query system known as the \u003Cb>Contextual Query Language\u003C/b> by virtue of which it allowed all of the WAIS Interfaces to talk to any of the WAIS Databases.\u003C/p>\n\u003Cp>Initially Z39.50 was not compatible with TCP/IP as it was made for the OSI protocol. After a few iterations, they made it compatible with TCP/IP. Later, it was obsoleted by one of its replacements, which used HTTP to maintain backward compatibility with the Query Syntax.\u003C/p>\n\u003Cblockquote>\n\u003Cp>Z39.50 thus offers an excellent case study of the problems involved in managing the evolution of a standard over time. It may well offer useful lessons for the future of other standards such as HTTP and HTML, which seem to be facing some of the same issues. \u003Cbr>\n~ \u003Ca href=\"https://dlib.org/dlib/april97/04lynch.html\">D-Lib Magazine, April 1997\u003C/a>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Request/Respone\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Request:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>connect z3950.loc.gov:7090/voyager\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>search \"library mashups\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>show 0 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>quit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Response:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>z3950.loc.gov:7090/voyager: 2 hits\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0 database=VOYAGER syntax=USmarc schema=unknown\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"usenetnntp\">Usenet/NNTP\u003C/h1>\n\u003Cp>The Network News Transfer Protocol [NNTP] was a pre-web protocol for transferring usenet articles from one network to another. It used Unix-To-Unix Copy [UUCP] before TCP/IP. With the rise of the web, it was re-codified to use SMTP like syntax over TCP/IP.\u003C/p>\n\u003Cp>NNTP enables both server-server and client-server communication for exchanging and serving newsgroup articles. NNTP used IANA authorized TCP-NoTLS:119 and TCP-TLS:563.\u003C/p>\n\u003Cp>Request/Response\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Init Connection\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Client: LIST\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: 215 list of newsgroups follows\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: net.server 00543 00501 y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: net.server2 10125 10011 y\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: .\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Client: GROUP net.server2\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: 211 104 10011 10125 net.server2 group selected\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"gopher\">Gopher\u003C/h1>\n\u003Cp>The Gopher protocol was created to distribute text! [Mostly-text based documents to be more precise]. It was the HTTP before the birth of HTTP. This protocol predates the web by mere months. This was perhaps the most dominant protocol for internet communication before HTTP became the standard in mid-to-late 90s.\u003C/p>\n\u003Cp>It was created by the University of Minnesota to act as a campus wide public bulletin board. With the rise of TCP/IP and the web in general, Gopher grew exponentially. It was mainly created to distribute textual documents in a menu-driven way.\u003C/p>\n\u003Cp>Failure to innovate under broader scope of the web [serving images, videos and interactivity] paired with their decision to charge royalty for their implementation of a Gopher server led to the ultimate and quick demise of the Gopher protocol.\u003C/p>\n\u003Cp>Request/Respone\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>/Reference\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1CIA World Factbook     /Archives/mirrors/textfiles.com/politics/CIA    gopher.quux.org 70\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>0Jargon 4.2.0   /Reference/Jargon 4.2.0 gopher.quux.org 70      +\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1Online Libraries       /Reference/Online Libraries     gopher.quux.org 70     +\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1RFCs: Internet Standards       /Computers/Standards and Specs/RFC      gopher.quux.org 70\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>1U.S. Gazetteer /Reference/U.S. Gazetteer       gopher.quux.org 70      +\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iThis file contains information on United States        fake    (NULL)  0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>icities, counties, and geographical areas.  It has      fake    (NULL)  0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>ilatitude/longitude, population, land and water area,   fake    (NULL)  0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iand ZIP codes. fake    (NULL)  0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>i       fake    (NULL)  0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iTo search for a city, enter the city's name.  To search        fake    (NULL) 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>ifor a county, use the name plus County -- for instance,        fake    (NULL) 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>iDallas County. fake    (NULL)  0\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Seems complex, but is really easy-ish when you read the documentation.\u003C/p>\n\u003Ch1 id=\"gemini\">Gemini\u003C/h1>\n\u003Cp>Gemini is a new attempt at creating a privacy-first bloat-free web. Started in 2019, it attempts to be a text-based alternative to the traditional web. It is a spiritual successor of the Gopher protocol.\u003C/p>\n\u003Cp>What differentiates the modern web and Gemini is the fact that Gemini has no client-side scripts. It can serve images and videos, but those will be downloaded to your machine and not played using the Gemini protocol [I.e not inside of a standard Gemini browser].\u003C/p>\n\u003Cp>Documents are written in plain-text or a special markdown/HTML like syntax called GemText markup. The protocol mandates the use of TLS and thus is secure by default.\u003C/p>\n\u003Cp>Request/Response\u003C/p>\n\u003Cpre class=\"astro-code material-theme-darker\" style=\"background-color:#212121;color:#EEFFFF; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>Client: [opens connection]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Client: \"gemini://example.net/search\" CRLF\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: \"10 Please input a search term\" CRLF\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: [closes connection]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Client: [prompts user, gets input]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Client: [opens connection]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Client: \"gemini://example.net/search?gemini%20search%20engines\" CRLF\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: \"20 \" mimetype CRLF content...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Server: [closes connection]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"sources\">Sources\u003C/h1>\n\u003Cp>Z39.50\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://dlib.org/dlib/april97/04lynch.html\">https://dlib.org/dlib/april97/04lynch.html\u003C/a>.\u003C/li>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/Z39.50\">https://en.wikipedia.org/wiki/Z39.50\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=KvmjB8gg7KY\">https://www.youtube.com/watch?v=KvmjB8gg7KY\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://groups.niso.org/higherlogic/ws/public/download/14978/z39-50-2003_s2014.pdf\">https://groups.niso.org/higherlogic/ws/public/download/14978/z39-50-2003_s2014.pdf\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.datamercs.net/posts/2020-08-15-z3950-for-dummies/\">https://www.datamercs.net/posts/2020-08-15-z3950-for-dummies/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>Further Reading\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.rfc-editor.org/rfc/rfc1729.txt\">https://www.rfc-editor.org/rfc/rfc1729.txt\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>NNTP\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc977\">https://datatracker.ietf.org/doc/html/rfc977\u003C/a>\u003C/li>\n\u003Cli>Updates on 977: \u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc3977\">https://datatracker.ietf.org/doc/html/rfc3977\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/Network_News_Transfer_Protocol\">https://en.wikipedia.org/wiki/Network_News_Transfer_Protocol\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://techterms.com/definition/nntp\">https://techterms.com/definition/nntp\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>Gopher\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/Gopher_(protocol)\">https://en.wikipedia.org/wiki/Gopher_(protocol)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=QGCSYyH2r6k\">https://www.youtube.com/watch?v=QGCSYyH2r6k\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>Gemini\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://geminiprotocol.net/\">https://geminiprotocol.net/\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://en.wikipedia.org/wiki/Gemini_(protocol)\">https://en.wikipedia.org/wiki/Gemini_(protocol)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=DoEI6VzybDk\">https://www.youtube.com/watch?v=DoEI6VzybDk\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=K-en4nEV5Xc\">https://www.youtube.com/watch?v=K-en4nEV5Xc\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://geminiprotocol.net/docs/protocol-specification.gmi\">https://geminiprotocol.net/docs/protocol-specification.gmi\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":129,"imagePaths":148,"frontmatter":118},[130,133,136,139,142,145],{"depth":61,"slug":131,"text":132},"note-examples-in-this-document-may-or-may-not-be-correct-it-is-based-on-my-very-limited-understanding-of-these-obscure-protocols","Note: Examples in this document may or may not be correct, it is based on my very limited understanding of these obscure protocols.",{"depth":41,"slug":134,"text":135},"wais--z3950","WAIS & Z39.50",{"depth":41,"slug":137,"text":138},"usenetnntp","Usenet/NNTP",{"depth":41,"slug":140,"text":141},"gopher","Gopher",{"depth":41,"slug":143,"text":144},"gemini","Gemini",{"depth":41,"slug":146,"text":147},"sources","Sources",[],"video-streaming-in-go-part-3",{"id":149,"data":151,"body":156,"filePath":157,"digest":158,"rendered":159},{"title":152,"slug":149,"description":153,"added":154,"tags":155},"What's up with Adaptive Bitrate Streaming? [Video Streaming in Go Part 3]","Learn about Adaptive Bitrate Video streaming protocols like MPEG-DASH & Apple HLS.",["Date","2025-06-12T07:00:00.000Z"],[32],"# About Adaptive Bitrate Streaming.\n\nWe already have HTTP Content Range based video streaming, \\[also known as Progressive Download], why do we even need Adaptive Bitrate Streaming protocols to do, basically, the same thing? Is this over-engineering?\n\nNot so fast! Adaptive Bitrate Protocols were made to solve a different problem. They are not made for your average desktop PCs connected with Gigabit Ethernet. They were mainly designed to reduce the load and provide smooth\\[Not Microsoft type :P] streaming for low powered and low/unstable internet connected devices.\n\n# HLS - HTTP Live Streaming\n\nApple's HLS is based on a very simple idea. Rather than dividing the videos on byte-addressable spaces, what if we divide it based on time duration, say 10 seconds.\n\n## It's a damn simple idea.\n\nHLS builds on [MPEG-2 Transport Streams\\[hence .ts files\\]](https://www.itu.int/rec/T-REC-H.222.0-201808-S/en)(See ISO\\_13818) or [MPEG-4 P14](https://www.loc.gov/preservation/digital/formats/fdd/fdd000155.shtml). The videos are made using H.264 and collated into an index file -> .m3u8;\n\nSince the index\\[or playlist] files are just addressing timestamps, the client can request for a higher or lower quality stream pretty easily. This is called [adaptive bitrate switching]()\\[Aha!]\n\nAnd because the switching is not based on a fixed metric, these protocols are called Adaptive Bitrate video streaming protocols.\n\n[Big Idea: In HLS, the client is in control. It initiates the conversation and demands the content. Server only provides.]()\n\n![](/assets/HLS-Architecture-Oversimplified.png)\n(Image Above): HLS client server architecture oversimplified, adapted from [\\[5\\]](https://www.rfc-editor.org/rfc/pdfrfc/rfc8216.txt.pdf).\n\nExplanation: \u003Cbr/>\nM3U8\u003C/u> = Manifest containing metadata about the content.\u003Cbr/> \u003Cu>Segments\u003C/u> = Actual binary contents of the file.\u003Cbr/> \u003Cu>Heuristics\u003C/u> = The Client-Side logic which pulls in media based on its metrics \\[say bandwidth].\u003Cbr/> \u003Cu>Media Player\u003C/u> = The final application that displays the media.\u003Cbr/>\n\n# MPEG-DASH\n\nThis was made by the Open Source community as an alternative to Apple controlled Open Source HLS protocol.\n\nCompared to HLS, MPEG-DASH is much more flexible. This flexibility also leads to the specification being more complex.\n\nMPEG-DASH follows a client-server model while defining its \u003Cu>data structures\u003C/u>. It is expected that client will be separate from the server and that, their communication will primarily happen using the [HTTP protocol](https://developer.mozilla.org/en-US/docs/Web/HTTP).\n\nWhile DASH does not require re-encoding of the video, it does require the generation of some specification related data structures that the encoding layer should generate. These data structures will later be used by the \u003Cu>client to query data from the server.\u003C/u> \u003Cbr/>\u003Cbr/>\n[Big Idea: In MPEG-DASH, the client is in control. It initiates the conversation and demands the content. Server only provides.]()\n\n![](/assets/2-DASH-Client-Server-Simplified.png)\n(Image Above): MPEG-DASH client server architecture oversimplified, adapted from [\\[1\\]](https://www.mpeg.org/standards/MPEG-DASH/).\n\nExplanation: \u003Cbr/> \u003Cu>MPD\u003C/u> = Manifest containing metadata about the content.\u003Cbr/> \u003Cu>Segments\u003C/u> = Actual binary contents of the file.\u003Cbr/> \u003Cu>Heuristics\u003C/u> = The Client-Side logic which pulls in media based on its metrics \\[say bandwidth].\u003Cbr/> \u003Cu>Media Player\u003C/u> = The final application that displays the media.\u003Cbr/>\n\n# Biggest Differences\n\nAt this point, you might be wondering both of these protocols sound pretty similar, what's the actual difference between them, and how does one make a choice.\n\n| Core Distinctions | HLS                                               | DASH                                         |\n| ----------------- | ------------------------------------------------- | -------------------------------------------- |\n| Codecs            | H.264, HEVC.                                      | H.264, HEVC, VP9, AV1, etc.                  |\n| DRM               | Apple Airplay.                                    | Any DRM standard.                            |\n| Adaptive Logic    | In control of the HLS client provider \\[Browser]. | In control of the client itself \\[Frontend]. |\n|                   |                                                   |                                              |\n| Live Streaming    | Updating the index file.                          | Explicit mechanisms for Live Streaming.      |\n|                   |                                                   |                                              |\n| Ideology          | Apple Controlled.                                 | FOSS.                                        |\n\n# Other notable protocols which will be elaborated in a further blog:\n\n* Microsoft Smooth Streaming.\n* Real-time Transport Protocol (RTP).\n* Adobe HTTP Dynamic Streaming.\n\n# Sources\n\n1. [MPEG White Paper](https://www.mpeg.org/standards/MPEG-DASH/)\n2. [MPEG-2 Transport Streams\\[hence .ts files\\]](https://www.itu.int/rec/T-REC-H.222.0-201808-S/en)\n3. [MPEG-4 P14](https://www.loc.gov/preservation/digital/formats/fdd/fdd000155.shtml)\n4. [https://developer.mozilla.org/en-US/docs/Web/HTTP](https://developer.mozilla.org/en-US/docs/Web/HTTP)\n5. [HLS RFC](https://www.rfc-editor.org/rfc/pdfrfc/rfc8216.txt.pdf)","posts/video-streaming-in-go-part-3.md","2ab14bf5b1c9209f",{"html":160,"metadata":161},"\u003Ch1 id=\"about-adaptive-bitrate-streaming\">About Adaptive Bitrate Streaming.\u003C/h1>\n\u003Cp>We already have HTTP Content Range based video streaming, [also known as Progressive Download], why do we even need Adaptive Bitrate Streaming protocols to do, basically, the same thing? Is this over-engineering?\u003C/p>\n\u003Cp>Not so fast! Adaptive Bitrate Protocols were made to solve a different problem. They are not made for your average desktop PCs connected with Gigabit Ethernet. They were mainly designed to reduce the load and provide smooth[Not Microsoft type :P] streaming for low powered and low/unstable internet connected devices.\u003C/p>\n\u003Ch1 id=\"hls---http-live-streaming\">HLS - HTTP Live Streaming\u003C/h1>\n\u003Cp>Apple’s HLS is based on a very simple idea. Rather than dividing the videos on byte-addressable spaces, what if we divide it based on time duration, say 10 seconds.\u003C/p>\n\u003Ch2 id=\"its-a-damn-simple-idea\">It’s a damn simple idea.\u003C/h2>\n\u003Cp>HLS builds on \u003Ca href=\"https://www.itu.int/rec/T-REC-H.222.0-201808-S/en\">MPEG-2 Transport Streams[hence .ts files]\u003C/a>(See ISO_13818) or \u003Ca href=\"https://www.loc.gov/preservation/digital/formats/fdd/fdd000155.shtml\">MPEG-4 P14\u003C/a>. The videos are made using H.264 and collated into an index file -> .m3u8;\u003C/p>\n\u003Cp>Since the index[or playlist] files are just addressing timestamps, the client can request for a higher or lower quality stream pretty easily. This is called \u003Ca href=\"\">adaptive bitrate switching\u003C/a>[Aha!]\u003C/p>\n\u003Cp>And because the switching is not based on a fixed metric, these protocols are called Adaptive Bitrate video streaming protocols.\u003C/p>\n\u003Cp>\u003Ca href=\"\">Big Idea: In HLS, the client is in control. It initiates the conversation and demands the content. Server only provides.\u003C/a>\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/HLS-Architecture-Oversimplified.png\" alt=\"\">\n(Image Above): HLS client server architecture oversimplified, adapted from \u003Ca href=\"https://www.rfc-editor.org/rfc/pdfrfc/rfc8216.txt.pdf\">[5]\u003C/a>.\u003C/p>\n\u003Cp>Explanation: \u003Cbr>\nM3U8 = Manifest containing metadata about the content.\u003Cbr> \u003Cu>Segments\u003C/u> = Actual binary contents of the file.\u003Cbr> \u003Cu>Heuristics\u003C/u> = The Client-Side logic which pulls in media based on its metrics [say bandwidth].\u003Cbr> \u003Cu>Media Player\u003C/u> = The final application that displays the media.\u003Cbr>\u003C/p>\n\u003Ch1 id=\"mpeg-dash\">MPEG-DASH\u003C/h1>\n\u003Cp>This was made by the Open Source community as an alternative to Apple controlled Open Source HLS protocol.\u003C/p>\n\u003Cp>Compared to HLS, MPEG-DASH is much more flexible. This flexibility also leads to the specification being more complex.\u003C/p>\n\u003Cp>MPEG-DASH follows a client-server model while defining its \u003Cu>data structures\u003C/u>. It is expected that client will be separate from the server and that, their communication will primarily happen using the \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">HTTP protocol\u003C/a>.\u003C/p>\n\u003Cp>While DASH does not require re-encoding of the video, it does require the generation of some specification related data structures that the encoding layer should generate. These data structures will later be used by the \u003Cu>client to query data from the server.\u003C/u> \u003Cbr>\u003Cbr>\n\u003Ca href=\"\">Big Idea: In MPEG-DASH, the client is in control. It initiates the conversation and demands the content. Server only provides.\u003C/a>\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/2-DASH-Client-Server-Simplified.png\" alt=\"\">\n(Image Above): MPEG-DASH client server architecture oversimplified, adapted from \u003Ca href=\"https://www.mpeg.org/standards/MPEG-DASH/\">[1]\u003C/a>.\u003C/p>\n\u003Cp>Explanation: \u003Cbr> \u003Cu>MPD\u003C/u> = Manifest containing metadata about the content.\u003Cbr> \u003Cu>Segments\u003C/u> = Actual binary contents of the file.\u003Cbr> \u003Cu>Heuristics\u003C/u> = The Client-Side logic which pulls in media based on its metrics [say bandwidth].\u003Cbr> \u003Cu>Media Player\u003C/u> = The final application that displays the media.\u003Cbr>\u003C/p>\n\u003Ch1 id=\"biggest-differences\">Biggest Differences\u003C/h1>\n\u003Cp>At this point, you might be wondering both of these protocols sound pretty similar, what’s the actual difference between them, and how does one make a choice.\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Core Distinctions\u003C/th>\u003Cth>HLS\u003C/th>\u003Cth>DASH\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Codecs\u003C/td>\u003Ctd>H.264, HEVC.\u003C/td>\u003Ctd>H.264, HEVC, VP9, AV1, etc.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>DRM\u003C/td>\u003Ctd>Apple Airplay.\u003C/td>\u003Ctd>Any DRM standard.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Adaptive Logic\u003C/td>\u003Ctd>In control of the HLS client provider [Browser].\u003C/td>\u003Ctd>In control of the client itself [Frontend].\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003C/td>\u003Ctd>\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Live Streaming\u003C/td>\u003Ctd>Updating the index file.\u003C/td>\u003Ctd>Explicit mechanisms for Live Streaming.\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003C/td>\u003Ctd>\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Ideology\u003C/td>\u003Ctd>Apple Controlled.\u003C/td>\u003Ctd>FOSS.\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch1 id=\"other-notable-protocols-which-will-be-elaborated-in-a-further-blog\">Other notable protocols which will be elaborated in a further blog:\u003C/h1>\n\u003Cul>\n\u003Cli>Microsoft Smooth Streaming.\u003C/li>\n\u003Cli>Real-time Transport Protocol (RTP).\u003C/li>\n\u003Cli>Adobe HTTP Dynamic Streaming.\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"sources\">Sources\u003C/h1>\n\u003Col>\n\u003Cli>\u003Ca href=\"https://www.mpeg.org/standards/MPEG-DASH/\">MPEG White Paper\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.itu.int/rec/T-REC-H.222.0-201808-S/en\">MPEG-2 Transport Streams[hence .ts files]\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.loc.gov/preservation/digital/formats/fdd/fdd000155.shtml\">MPEG-4 P14\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">https://developer.mozilla.org/en-US/docs/Web/HTTP\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.rfc-editor.org/rfc/pdfrfc/rfc8216.txt.pdf\">HLS RFC\u003C/a>\u003C/li>\n\u003C/ol>",{"headings":162,"imagePaths":182,"frontmatter":151},[163,166,169,172,175,178,181],{"depth":41,"slug":164,"text":165},"about-adaptive-bitrate-streaming","About Adaptive Bitrate Streaming.",{"depth":41,"slug":167,"text":168},"hls---http-live-streaming","HLS - HTTP Live Streaming",{"depth":54,"slug":170,"text":171},"its-a-damn-simple-idea","It’s a damn simple idea.",{"depth":41,"slug":173,"text":174},"mpeg-dash","MPEG-DASH",{"depth":41,"slug":176,"text":177},"biggest-differences","Biggest Differences",{"depth":41,"slug":179,"text":180},"other-notable-protocols-which-will-be-elaborated-in-a-further-blog","Other notable protocols which will be elaborated in a further blog:",{"depth":41,"slug":146,"text":147},[]]